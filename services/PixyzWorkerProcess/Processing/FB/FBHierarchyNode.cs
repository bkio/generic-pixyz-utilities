// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBHierarchyNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FBHierarchyNode GetRootAsFBHierarchyNode(ByteBuffer _bb) { return GetRootAsFBHierarchyNode(_bb, new FBHierarchyNode()); }
  public static FBHierarchyNode GetRootAsFBHierarchyNode(ByteBuffer _bb, FBHierarchyNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBHierarchyNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong UniqueID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong ParentID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong MetadataID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public FB.FBGeometryPart? GeometryParts(int j) { int o = __p.__offset(10); return o != 0 ? (FB.FBGeometryPart?)(new FB.FBGeometryPart()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int GeometryPartsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ulong ChildNodes(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int ChildNodesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetChildNodesBytes() { return __p.__vector_as_span<ulong>(12, 8); }
#else
  public ArraySegment<byte>? GetChildNodesBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public ulong[] GetChildNodesArray() { return __p.__vector_as_array<ulong>(12); }

  public static Offset<FB.FBHierarchyNode> CreateFBHierarchyNode(FlatBufferBuilder builder,
      ulong UniqueID = 0,
      ulong ParentID = 0,
      ulong MetadataID = 0,
      VectorOffset GeometryPartsOffset = default(VectorOffset),
      VectorOffset ChildNodesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    FBHierarchyNode.AddMetadataID(builder, MetadataID);
    FBHierarchyNode.AddParentID(builder, ParentID);
    FBHierarchyNode.AddUniqueID(builder, UniqueID);
    FBHierarchyNode.AddChildNodes(builder, ChildNodesOffset);
    FBHierarchyNode.AddGeometryParts(builder, GeometryPartsOffset);
    return FBHierarchyNode.EndFBHierarchyNode(builder);
  }

  public static void StartFBHierarchyNode(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUniqueID(FlatBufferBuilder builder, ulong UniqueID) { builder.AddUlong(0, UniqueID, 0); }
  public static void AddParentID(FlatBufferBuilder builder, ulong ParentID) { builder.AddUlong(1, ParentID, 0); }
  public static void AddMetadataID(FlatBufferBuilder builder, ulong MetadataID) { builder.AddUlong(2, MetadataID, 0); }
  public static void AddGeometryParts(FlatBufferBuilder builder, VectorOffset GeometryPartsOffset) { builder.AddOffset(3, GeometryPartsOffset.Value, 0); }
  public static void StartGeometryPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 8); }
  public static void AddChildNodes(FlatBufferBuilder builder, VectorOffset ChildNodesOffset) { builder.AddOffset(4, ChildNodesOffset.Value, 0); }
  public static VectorOffset CreateChildNodesVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChildNodesVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartChildNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FB.FBHierarchyNode> EndFBHierarchyNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FB.FBHierarchyNode>(o);
  }
};


}
