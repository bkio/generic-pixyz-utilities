# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBLOD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBLOD(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBLOD()
        x.Init(buf, n + offset)
        return x

    # FBLOD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBLOD
    def VertexNormalTangentList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 36
            from .FBVertexNormalTangent import FBVertexNormalTangent
            obj = FBVertexNormalTangent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBLOD
    def VertexNormalTangentListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBLOD
    def VertexNormalTangentListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FBLOD
    def Indexes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBLOD
    def IndexesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # FBLOD
    def IndexesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBLOD
    def IndexesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def FBLODStart(builder): builder.StartObject(2)
def FBLODAddVertexNormalTangentList(builder, VertexNormalTangentList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(VertexNormalTangentList), 0)
def FBLODStartVertexNormalTangentListVector(builder, numElems): return builder.StartVector(36, numElems, 4)
def FBLODAddIndexes(builder, Indexes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Indexes), 0)
def FBLODStartIndexesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FBLODEnd(builder): return builder.EndObject()
