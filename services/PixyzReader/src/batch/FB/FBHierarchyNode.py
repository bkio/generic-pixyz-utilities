# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBHierarchyNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBHierarchyNode(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBHierarchyNode()
        x.Init(buf, n + offset)
        return x

    # FBHierarchyNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBHierarchyNode
    def UniqueID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FBHierarchyNode
    def ParentID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FBHierarchyNode
    def MetadataID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FBHierarchyNode
    def GeometryParts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 48
            from .FBGeometryPart import FBGeometryPart
            obj = FBGeometryPart()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBHierarchyNode
    def GeometryPartsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBHierarchyNode
    def GeometryPartsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FBHierarchyNode
    def ChildNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FBHierarchyNode
    def ChildNodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # FBHierarchyNode
    def ChildNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBHierarchyNode
    def ChildNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def FBHierarchyNodeStart(builder): builder.StartObject(5)
def FBHierarchyNodeAddUniqueID(builder, UniqueID): builder.PrependUint64Slot(0, UniqueID, 0)
def FBHierarchyNodeAddParentID(builder, ParentID): builder.PrependUint64Slot(1, ParentID, 0)
def FBHierarchyNodeAddMetadataID(builder, MetadataID): builder.PrependUint64Slot(2, MetadataID, 0)
def FBHierarchyNodeAddGeometryParts(builder, GeometryParts): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GeometryParts), 0)
def FBHierarchyNodeStartGeometryPartsVector(builder, numElems): return builder.StartVector(48, numElems, 8)
def FBHierarchyNodeAddChildNodes(builder, ChildNodes): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ChildNodes), 0)
def FBHierarchyNodeStartChildNodesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FBHierarchyNodeEnd(builder): return builder.EndObject()
