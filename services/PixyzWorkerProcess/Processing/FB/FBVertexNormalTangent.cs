// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBVertexNormalTangent : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public FBVertexNormalTangent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FB.FBVector3D Vertex { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 0, __p.bb); } }
  public FB.FBVector3D Normal { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 12, __p.bb); } }
  public FB.FBVector3D Tangent { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<FB.FBVertexNormalTangent> CreateFBVertexNormalTangent(FlatBufferBuilder builder, float Vertex_X, float Vertex_Y, float Vertex_Z, float Normal_X, float Normal_Y, float Normal_Z, float Tangent_X, float Tangent_Y, float Tangent_Z) {
    builder.Prep(4, 36);
    builder.Prep(4, 12);
    builder.PutFloat(Tangent_Z);
    builder.PutFloat(Tangent_Y);
    builder.PutFloat(Tangent_X);
    builder.Prep(4, 12);
    builder.PutFloat(Normal_Z);
    builder.PutFloat(Normal_Y);
    builder.PutFloat(Normal_X);
    builder.Prep(4, 12);
    builder.PutFloat(Vertex_Z);
    builder.PutFloat(Vertex_Y);
    builder.PutFloat(Vertex_X);
    return new Offset<FB.FBVertexNormalTangent>(builder.Offset);
  }
};


}
