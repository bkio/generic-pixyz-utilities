# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBGeometryNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBGeometryNode(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBGeometryNode()
        x.Init(buf, n + offset)
        return x

    # FBGeometryNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBGeometryNode
    def UniqueID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FBGeometryNode
    def LodNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBGeometryNode
    def LOD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FBLOD import FBLOD
            obj = FBLOD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FBGeometryNodeStart(builder): builder.StartObject(3)
def FBGeometryNodeAddUniqueID(builder, UniqueID): builder.PrependUint64Slot(0, UniqueID, 0)
def FBGeometryNodeAddLodNumber(builder, LodNumber): builder.PrependInt32Slot(1, LodNumber, 0)
def FBGeometryNodeAddLOD(builder, LOD): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(LOD), 0)
def FBGeometryNodeEnd(builder): return builder.EndObject()
