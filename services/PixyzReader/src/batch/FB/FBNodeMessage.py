# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBNodeMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBNodeMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBNodeMessage()
        x.Init(buf, n + offset)
        return x

    # FBNodeMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBNodeMessage
    def ModelID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FBNodeMessage
    def Errors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBNodeMessage
    def HierarchyNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FBHierarchyNode import FBHierarchyNode
            obj = FBHierarchyNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBNodeMessage
    def MetadataNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FBMetadataNode import FBMetadataNode
            obj = FBMetadataNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBNodeMessage
    def GeometryNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FBGeometryNode import FBGeometryNode
            obj = FBGeometryNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBNodeMessage
    def Done(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FBNodeMessage
    def MessageCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FBNodeMessageStart(builder): builder.StartObject(7)
def FBNodeMessageAddModelID(builder, ModelID): builder.PrependUint64Slot(0, ModelID, 0)
def FBNodeMessageAddErrors(builder, Errors): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Errors), 0)
def FBNodeMessageAddHierarchyNode(builder, HierarchyNode): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(HierarchyNode), 0)
def FBNodeMessageAddMetadataNode(builder, MetadataNode): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MetadataNode), 0)
def FBNodeMessageAddGeometryNode(builder, GeometryNode): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GeometryNode), 0)
def FBNodeMessageAddDone(builder, Done): builder.PrependBoolSlot(5, Done, 0)
def FBNodeMessageAddMessageCount(builder, MessageCount): builder.PrependInt32Slot(6, MessageCount, 0)
def FBNodeMessageEnd(builder): return builder.EndObject()
