// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBGeometryPart : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public FBGeometryPart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong GeometryID { get { return __p.bb.GetUlong(__p.bb_pos + 0); } }
  public FB.FBVector3D Location { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 8, __p.bb); } }
  public FB.FBVector3D Rotation { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 20, __p.bb); } }
  public FB.FBVector3D Scale { get { return (new FB.FBVector3D()).__assign(__p.bb_pos + 32, __p.bb); } }
  public FB.FBColor Color { get { return (new FB.FBColor()).__assign(__p.bb_pos + 44, __p.bb); } }

  public static Offset<FB.FBGeometryPart> CreateFBGeometryPart(FlatBufferBuilder builder, ulong GeometryID, float Location_X, float Location_Y, float Location_Z, float Rotation_X, float Rotation_Y, float Rotation_Z, float Scale_X, float Scale_Y, float Scale_Z, byte Color_R, byte Color_G, byte Color_B, bool Color_NoColor) {
    builder.Prep(8, 48);
    builder.Prep(1, 4);
    builder.PutBool(Color_NoColor);
    builder.PutByte(Color_B);
    builder.PutByte(Color_G);
    builder.PutByte(Color_R);
    builder.Prep(4, 12);
    builder.PutFloat(Scale_Z);
    builder.PutFloat(Scale_Y);
    builder.PutFloat(Scale_X);
    builder.Prep(4, 12);
    builder.PutFloat(Rotation_Z);
    builder.PutFloat(Rotation_Y);
    builder.PutFloat(Rotation_X);
    builder.Prep(4, 12);
    builder.PutFloat(Location_Z);
    builder.PutFloat(Location_Y);
    builder.PutFloat(Location_X);
    builder.PutUlong(GeometryID);
    return new Offset<FB.FBGeometryPart>(builder.Offset);
  }
};


}
